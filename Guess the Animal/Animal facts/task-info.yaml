type: edu
files:
- name: src/animals/Main.java
  visible: true
  text: |
    package animals;

    import animals.userInterface.UI;

    public class Main {

        public static void main(String[] args) {
            new  UI().start();
            System.out.println();
        }
    }
  learner_created: false
- name: src/animals/userInterface/Sentences.java
  visible: true
  text: |
    package animals.userInterface;

    import animals.utils.Pair;
    import java.time.LocalTime;
    import java.util.List;
    import java.util.Random;
    import java.util.function.Predicate;


    public class Sentences {

        public static final String queryAnimal = "Enter an animal:";

        private static final String confirmAnimalTemplate = "Is it %s?";
        private static final String answerTemplate = "You answered: %s";
        private static final String yes = "Yes";
        private static final String no = "No";
        private static final List<String> reQuerySentences =
                List.of(
                        "I'm not sure I caught you: was it yes or no?",
                        "Funny, I still don't understand, is it yes or no?",
                        "Oh, it's too complicated for me: just tell me yes or no.",
                        "Could you please simply say yes or no?",
                        "Oh, no, don't try to confuse me: say yes or no."
                );
        private static final List<String> goodbyeMessages =
                List.of(
                        "Bye!",
                        "See you soon!",
                        "Have a nice day!",
                        "See you the next time",
                        "Talk to you later",
                        "Au revoir",
                        "Arrivederci",
                        "Falou ae, Ã© nois",
                        "Adios",
                        "Te visurum",
                        "Vi ses"
                );
        private static final Random random = new Random();



        public static String getGreeting() {
            return Greetings.getGreeting();
        }

        public static String getConfirmAnimalQuery(String animal) {

            return String.format(confirmAnimalTemplate, animal);
        }

        public static String getConfirmationReQuery(){
            final int sentenceIndex = random.nextInt(reQuerySentences.size());
            return reQuerySentences.get(sentenceIndex);
        }

        public static String getGoodbye() {
            final int sentenceIndex = random.nextInt(goodbyeMessages.size());
            return goodbyeMessages.get(sentenceIndex);
        }

        public static String getAnswer(WordService.Affirmation affirmation) {
            if(affirmation == WordService.Affirmation.AFFIRMATIVE) {
                return String.format(answerTemplate, yes);
            } else if(affirmation == WordService.Affirmation.NEGATIVE) {
                return String.format(answerTemplate, no);
            } else {
                throw new IllegalArgumentException(
                        "affirmation on getAnswer could be only " +
                                "affirmative or negative, but was neither");
            }
        }

        private static class Greetings {
            static final String morning = "Good morning!";
            static final String afternoon = "Good afternoon!";
            static final String evening = "Good evening!";
            static final String lateHours = "Hi, night owl!";


            static final List<Pair<Predicate<Integer>, String>> testsList =
                    List.of(
                            new Pair<>(Greetings::isMorning, morning),
                            new Pair<>(Greetings::isAfternoon, afternoon),
                            new Pair<>(Greetings::isEvening, evening),
                            new Pair<>(Greetings::isLateHours, lateHours)
                    );

            static String getGreeting(){
                final LocalTime time = LocalTime.now();
                final int currentHour = time.getHour();
                return testsList.stream()
                        .filter(pair -> pair.head.test(currentHour))
                        .findFirst()
                        .orElse(new Pair<>(x -> true, "You are out of the time dimension! NICE!!!"))
                        .tail;
            }

            static private boolean isMorning(int currentHour) {
                return currentHour >= 5 && currentHour <= 12;
            }

            static private boolean isAfternoon(int currentHour) {
                return currentHour > 12 && currentHour <= 18;
            }

            static private boolean isEvening(int currentHour) {
                return currentHour > 18 ;
            }

            static private boolean isLateHours(int currentHour) {
                return currentHour < 5;
            }
        }

    }
  learner_created: false
- name: src/animals/utils/Pair.java
  visible: true
  text: |
    package animals.utils;

    public class Pair<H, T> {
        public final H head;
        public final T tail;

        public Pair(H head, T tail) {
            this.head = head;
            this.tail = tail;
        }
    }
  learner_created: false
- name: src/animals/userInterface/UI.java
  visible: true
  text: |
    package animals.userInterface;

    import java.util.Scanner;

    public class UI {
        final Scanner scanner = new Scanner(System.in);

        public void start(){

            println(Sentences.getGreeting());

            println(Sentences.queryAnimal);
            final String inputAnimal = getInput();
            final String animal = WordService.extractAnimal(inputAnimal);

            final String confirmationMessage = Sentences.getConfirmAnimalQuery(animal);

            println(confirmationMessage);
            final WordService.Affirmation affirmation = getValidConfirmation();

            final String answer = Sentences.getAnswer(affirmation);
            println(answer);

            final String goodbyeMessage = Sentences.getGoodbye();
            println(goodbyeMessage);
            System.exit(0);
        }

        private WordService.Affirmation getValidConfirmation(){

            final String inputAnswer = getInput();
            final WordService.Affirmation affirmation = WordService.checkAffirmation(inputAnswer);

            if(affirmation != WordService.Affirmation.NEITHER) {
                return affirmation;
            } else {
                final String confirmationReQuery = Sentences.getConfirmationReQuery();
                println(confirmationReQuery);
                return getValidConfirmation();
            }

        }

        private void println(Object any) {
            System.out.println(any.toString());
        }

        private String getInput() {
            return scanner.nextLine();
        }
    }
  learner_created: false
- name: src/animals/userInterface/WordService.java
  visible: true
  text: |
    package animals.userInterface;

    import java.util.List;

    public class WordService {

        private static final List<Character> vowels = List.of('a', 'e', 'i', 'o', 'u');
        private final static List<String> prepositions = List.of("a", "an");
        private final static List<String> affirmatives =
                List.of("y", "yes", "yeah", "yep", "sure", "right", "affirmative",
                        "correct", "indeed", "you bet", "exactly", "you said it");
        private final static List<String> negatives =
                List.of("n", "no", "no way", "nah", "nope",
                        "negative", "i don't think so", "yeah no");


        public static String extractAnimal(String animalMaybeWithPreposition) {
            final String normalizedAnimalMaybeWithPreposition = normalize(animalMaybeWithPreposition);

            final String[] animalArray =
                    normalizedAnimalMaybeWithPreposition.split("\\s+", 2);

            if(animalArray.length < 2) {
                final String preposition = getPreposition(animalArray[0]);
                final String animal = normalizedAnimalMaybeWithPreposition;
                return String.format("%s %s", preposition, animal);
            } else if(isPreposition(animalArray[0])) {
                return String.format("%s %s", animalArray[0], animalArray[1]);
            } else {
                final String preposition = getPreposition(animalArray[0]);
                return String.format("%s %s %s", preposition, animalArray[0], animalArray[1]);
            }
        }

        public static Affirmation checkAffirmation(String someAffirmation) {
            final String normalizedAffirmation  = normalize(someAffirmation).replaceFirst("[\\.!?]$", "");

            if(isAffirmative(normalizedAffirmation)) {
                return Affirmation.AFFIRMATIVE;
            } else if(isNegative(normalizedAffirmation)) {
                return Affirmation.NEGATIVE;
            } else {
                return Affirmation.NEITHER;
            }
        }

        private static String getPreposition(String str){
            return isVowel(str.charAt(0)) ? prepositions.get(1) : prepositions.get(0);
        }

        private static boolean isVowel(char ch) {
            return vowels.contains(ch);
        }

        private static boolean isAffirmative(String maybeAffirmative) {
            return affirmatives.contains(normalize(maybeAffirmative));
        }

        private static boolean isNegative(String maybeNegative) {
            return negatives.contains(normalize(maybeNegative));
        }



        private static boolean isPreposition(String maybePreposition) {
            return prepositions.contains(maybePreposition);
        }

        private static String normalize(String str) {
            return str.trim().toLowerCase();
        }

        enum Affirmation {
            AFFIRMATIVE, NEGATIVE, NEITHER
        }
    }
  learner_created: false
- name: test/Scenario.java
  visible: false
  text: |-
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.io.File;
    import java.io.IOException;
    import java.util.Map;
    import java.util.function.Predicate;
    import java.util.regex.Pattern;

    import static java.text.MessageFormat.format;
    import static java.util.function.Predicate.not;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class Scenario {
        private final Object[][] data;
        private final String[][] script;
        private TestedProgram main;
        private String output = "";

        Scenario(String name) throws IOException {
            data = new YAMLMapper().readValue(new File("test/" + name + ".data.yaml"), String[][].class);
            script = new YAMLMapper().readValue(new File("test/" + name + ".script.yaml"), String[][].class);
            System.out.println("Scenario '" + name + "' is started.");
            System.out.println();
        }

        CheckResult check() {
            for (var values : data) {
                for (var action : script) {
                    final var command = action[0];
                    switch (command) {
                        case "start":
                            main = new TestedProgram();
                            output = action.length == 1
                                    ? main.start()
                                    : main.start(format(action[1], values).split(" "));
                            output = output.trim();
                            continue;
                        case "input":
                            output = main.execute(format(action[1], values)).trim();
                            continue;
                        case "finish":
                            if (main.isFinished()) {
                                continue;
                            }
                            return wrong(format(action[1], values));
                        default:
                            final Map<String, Predicate<String>> validation = Map.of(
                                    "contains", output::contains,
                                    "not contains", not(output::contains),
                                    "file exists", file -> new File(file).exists(),
                                    "file delete", file -> new File(file).delete(),
                                    "find", pattern -> Pattern.compile(pattern).matcher(output).find(),
                                    "matches", output::matches);

                            final var expected = format(action[1], values);
                            if (validation.get(command).test(expected)) {
                                continue;
                            }
                            final var feedback = format(action[2], values) + System.lineSeparator()
                                    + "Expected " + command + ": \"" + expected + "\"" + System.lineSeparator()
                                    + "Actual data is: \"" + output + "\".";
                            return wrong(feedback);
                    }
                }
            }
            return correct();
        }

    }
  learner_created: false
- name: test/incorrect-statement.script.yaml
  visible: false
  text: |
    #
    # This is a script to test the reaction to incorrect statements.
    #
    ---
    - [start]
    - [input, cat]
    - [input, dog]
    - - contains
      - Specify a fact that distinguishes a cat from a dog.
      - The program should asks the user for a fact
    #
    # Here we substitute all incorrect statements from data file
    #
    - [input, "{0}"]
    - - contains
      - "examples of a statement"
      - "The statement \"{0}\" doesn't fit the template. The program should show examples and ask the user again."
  learner_created: false
- name: test/correct-statement.data.yaml
  visible: false
  text: |
    ---
    - - "It is a mammal"
    - - "It can barks"
    - - "It has a tail"
    - - "IT IS A SHY ANIMAL"
    - - "it CAN swim and fly"
    - - "it has long tooth."
    - - "iT has five legs"
    - - "It can catch a mouse."
    - - "it is a danger predator."
    - - "It is living in the forest."
  learner_created: false
- name: test/complete-scenario.script.yaml
  visible: false
  text: |-
    #
    # This script emulate complete sessions from start to the finish
    #
    ---
    - [start]
    - [contains, first animal, The program should asks the user for an first animal name]
    - [input, "{0}"]
    - [contains, second animal, The program should asks the user for an second animal name]
    - [input, "{1}"]
    - - contains
      - "Specify a fact that distinguishes {2} from {3}."
      - The program should asks the user for a fact
    - [input, "{4}"]
    - - contains
      - "correct for {3}?"
      - "The program should clarify if the statement is correct for {3}."
    #
    # Here the user unclear answer and the program should ask again
    #
    - [input, "{5}"]
    - - contains
      - yes or no
      - "The user input {5} should not be recognized as correct answer. The program should ask the user again."
    #
    # Here the user answer correctly
    #
    - [input, "{6}"]
    #
    # The program should generate two facts and the question
    #
    - - contains
      - "{7}"
      - The program should generate a fact about the first animals.
    - - contains
      - "{8}"
      - The program should generate a fact about the second animals.
    - - contains
      - "{9}"
      - The program should generate a closed question.
    - - finish
      - The program should finish after the correct response.
  learner_created: false
- name: test/GuessAnimalTest.java
  visible: false
  text: |+
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.io.IOException;

    public class GuessAnimalTest extends StageTest<String> {

        final String[] script = new String[]{
                "incorrect-statement",
                "correct-statement",
                "complete-scenario",
                "facts-and-question"
        };

        @DynamicTest(data = "script")
        CheckResult runScripts(final String script) throws IOException {
            return new Scenario(script).check();
        }

    }

  learner_created: false
- name: test/facts-and-question.script.yaml
  visible: false
  text: |-
    #
    # This script to test generation of facts and a question
    #
    ---
    - [start]
    #
    # Here we send to the input the names of two animals and the statement.
    #
    - [input, "{0}"]  # The first animal
    - [input, "{1}"]  # The second animal
    - [input, "{2}"]  # The statement
    - [input, "{3}"]  # Is the statement correct for the second animal?
    #
    # The program should generate two facts and the question
    #
    - - contains
      - "{4}"
      - "The program should generate a fact about {0}. The fact should be â{4}â."

    - - contains
      - "{5}"
      - "The program should generate a fact about {1}. The fact should be â{5}â."

    - - contains
      - "{6}"
      - "The program should generate a closed question: â{6}â from statement â{2}â."

    - [finish, The program should finish.]
  learner_created: false
- name: test/facts-and-question.data.yaml
  visible: false
  text: |
    #
    # This is a data file to test generated facts and a question
    #

    # --- user input ---
    # The first animal
    # The second animal
    # The statement
    # Is the statement correct for the second animal?

    # --- expected output ---
    # The fact for the first animal
    # The fact for the second animal
    # The closed question to distinguishes one animal from other
    ---
    - - cat
      - shark
      - it is a mammal
      - no
      - "The cat is a mammal."
      - "The shark isn't a mammal."
      - "Is it a mammal?"

    - - wolf
      - hare
      - it is a shy animal
      - yes
      - "The wolf isn't a shy animal."
      - "The hare is a shy animal."
      - "Is it a shy animal?"


    - - wolf
      - fox
      - it has a long bushy tail
      - yes
      - "The wolf doesn't have a long bushy tail."
      - "The fox has a long bushy tail."
      - "Does it have a long bushy tail?"

    - - dog
      - cat
      - it can climb trees
      - yes
      - "The dog can't climb trees."
      - "The cat can climb trees."
      - "Can it climb trees?"

    - - dog
      - fox
      - it is living in the forest
      - yes
      - "The dog isn't living in the forest."
      - "The fox is living in the forest."
      - "Is it living in the forest?"
  learner_created: false
- name: test/correct-statement.script.yaml
  visible: false
  text: |
    #
    # This is a script to test correct statements.
    #
    ---
    - [start]
    - [input, cat]
    - [input, dog]
    - - contains
      - Specify a fact that distinguishes a cat from a dog.
      - The program should asks the user for a fact
    #
    # Here we substitute all correct statements from data file
    #
    - [input, "{0}"]
    - - contains
      - correct for a dog?
      - The program should clarify if the statement is correct for a dog.
  learner_created: false
- name: test/complete-scenario.data.yaml
  visible: false
  text: |
    #
    # The data for the complete scenario from the start to the finish
    #
    ---
    - - "cat"
      - "DOG"
      - "a cat"
      - "a dog"
      - "It can climb trees"
      - "ha"
      - "no"
      - "The cat can climb trees"
      - "The dog can't climb trees"
      - "Can it climb trees?"

    - - "hare"
      - "wolf"
      - "a hare"
      - "a wolf"
      - "It is a shy animal"
      - "nej"
      - "no"
      - "The hare is a shy animal"
      - "The wolf isn't a shy animal"
      - "Is it a shy animal?"

    - - "a lynx"
      - "an unicorN"
      - "a lynx"
      - "an unicorn"
      - "It is a fabulous animal?"
      - "of c"
      - "yes"
      - "The lynx isn't a fabulous animal"
      - "The unicorn is a fabulous animal"
      - "Is it a fabulous animal?"
  learner_created: false
- name: test/incorrect-statement.data.yaml
  visible: false
  text: |
    #
    # All of these statements are wrong.
    #
    ---
    - - "The dog barks"
    - - "The cat meows"
    - - "I don't know..."
    - - "Who knows?"
    - - "It flies"
    - - "It barks"
    - - "Can it fly?"
    - - "It fly"
    - - "may be it barks?"
    - - "I do not what to say..."
  learner_created: false
- name: src/animals/model/Fact.java
  visible: true
  learner_created: true
- name: src/animals/model/Animal.java
  visible: true
  learner_created: true
- name: src/animals/testings/WordServiceTests.java
  visible: true
  learner_created: true
- name: src/animals/model/Distinction.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/132/stages/704/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 14 Mar 2021 19:44:58 UTC
record: 1
