type: edu
files:
- name: src/animals/Main.java
  visible: true
  text: |
    package animals;

    import animals.userInterface.UI;

    public class Main {

        public static void main(String[] args) {
            new  UI().start();
            System.out.println();
        }
    }
  learner_created: false
- name: src/animals/userInterface/WordService.java
  visible: true
  text: |
    package animals.userInterface;

    import java.util.List;

    public class WordService {

        private static final List<Character> vowels = List.of('a', 'e', 'i', 'o', 'u');
        private final static List<String> prepositions = List.of("a", "an");
        private final static List<String> affirmatives =
                List.of("y", "yes", "yeah", "yep", "sure", "right", "affirmative",
                        "correct", "indeed", "you bet", "exactly", "you said it");
        private final static List<String> negatives =
                List.of("n", "no", "no way", "nah", "nope",
                        "negative", "i don't think so", "yeah no");


        public static String extractAnimal(String animalMaybeWithPreposition) {
            final String normalizedAnimalMaybeWithPreposition = normalize(animalMaybeWithPreposition);

            final String[] animalArray =
                    normalizedAnimalMaybeWithPreposition.split("\\s+", 2);

            if(animalArray.length < 2) {
                final String preposition = getPreposition(animalArray[0]);
                final String animal = normalizedAnimalMaybeWithPreposition;
                return String.format("%s %s", preposition, animal);
            } else if(isPreposition(animalArray[0])) {
                return String.format("%s %s", animalArray[0], animalArray[1]);
            } else {
                final String preposition = getPreposition(animalArray[0]);
                return String.format("%s %s %s", preposition, animalArray[0], animalArray[1]);
            }
        }

        public static Affirmation checkAffirmation(String someAffirmation) {
            final String normalizedAffirmation  = normalize(someAffirmation).replaceFirst("[\\.!?]$", "");

            if(isAffirmative(normalizedAffirmation)) {
                return Affirmation.AFFIRMATIVE;
            } else if(isNegative(normalizedAffirmation)) {
                return Affirmation.NEGATIVE;
            } else {
                return Affirmation.NEITHER;
            }
        }

        private static String getPreposition(String str){
            return isVowel(str.charAt(0)) ? prepositions.get(1) : prepositions.get(0);
        }

        private static boolean isVowel(char ch) {
            return vowels.contains(ch);
        }

        private static boolean isAffirmative(String maybeAffirmative) {
            return affirmatives.contains(normalize(maybeAffirmative));
        }

        private static boolean isNegative(String maybeNegative) {
            return negatives.contains(normalize(maybeNegative));
        }



        private static boolean isPreposition(String maybePreposition) {
            return prepositions.contains(maybePreposition);
        }

        private static String normalize(String str) {
            return str.trim().toLowerCase();
        }

        enum Affirmation {
            AFFIRMATIVE, NEGATIVE, NEITHER
        }
    }
  learner_created: false
- name: src/animals/utils/Pair.java
  visible: true
  text: |
    package animals.utils;

    public class Pair<H, T> {
        public final H head;
        public final T tail;

        public Pair(H head, T tail) {
            this.head = head;
            this.tail = tail;
        }
    }
  learner_created: false
- name: src/animals/userInterface/UI.java
  visible: true
  text: |
    package animals.userInterface;

    import java.util.Scanner;

    public class UI {
        final Scanner scanner = new Scanner(System.in);

        public void start(){

            println(Sentences.getGreeting());

            println(Sentences.queryAnimal);
            final String inputAnimal = getInput();
            final String animal = WordService.extractAnimal(inputAnimal);

            final String confirmationMessage = Sentences.getConfirmAnimalQuery(animal);

            println(confirmationMessage);
            final WordService.Affirmation affirmation = getValidConfirmation();

            final String answer = Sentences.getAnswer(affirmation);
            println(answer);

            final String goodbyeMessage = Sentences.getGoodbye();
            println(goodbyeMessage);
            System.exit(0);
        }

        private WordService.Affirmation getValidConfirmation(){

            final String inputAnswer = getInput();
            final WordService.Affirmation affirmation = WordService.checkAffirmation(inputAnswer);

            if(affirmation != WordService.Affirmation.NEITHER) {
                return affirmation;
            } else {
                final String confirmationReQuery = Sentences.getConfirmationReQuery();
                println(confirmationReQuery);
                return getValidConfirmation();
            }

        }

        private void println(Object any) {
            System.out.println(any.toString());
        }

        private String getInput() {
            return scanner.nextLine();
        }
    }
  learner_created: false
- name: src/animals/userInterface/Sentences.java
  visible: true
  text: |
    package animals.userInterface;

    import animals.utils.Pair;
    import java.time.LocalTime;
    import java.util.List;
    import java.util.Random;
    import java.util.function.Predicate;


    public class Sentences {

        public static final String queryAnimal = "Enter an animal:";

        private static final String confirmAnimalTemplate = "Is it %s?";
        private static final String answerTemplate = "You answered: %s";
        private static final String yes = "Yes";
        private static final String no = "No";
        private static final List<String> reQuerySentences =
                List.of(
                        "I'm not sure I caught you: was it yes or no?",
                        "Funny, I still don't understand, is it yes or no?",
                        "Oh, it's too complicated for me: just tell me yes or no.",
                        "Could you please simply say yes or no?",
                        "Oh, no, don't try to confuse me: say yes or no."
                );
        private static final List<String> goodbyeMessages =
                List.of(
                        "Bye!",
                        "See you soon!",
                        "Have a nice day!",
                        "See you the next time",
                        "Talk to you later",
                        "Au revoir",
                        "Arrivederci",
                        "Falou ae, Ã© nois",
                        "Adios",
                        "Te visurum",
                        "Vi ses"
                );
        private static final Random random = new Random();



        public static String getGreeting() {
            return Greetings.getGreeting();
        }

        public static String getConfirmAnimalQuery(String animal) {

            return String.format(confirmAnimalTemplate, animal);
        }

        public static String getConfirmationReQuery(){
            final int sentenceIndex = random.nextInt(reQuerySentences.size());
            return reQuerySentences.get(sentenceIndex);
        }

        public static String getGoodbye() {
            final int sentenceIndex = random.nextInt(goodbyeMessages.size());
            return goodbyeMessages.get(sentenceIndex);
        }

        public static String getAnswer(WordService.Affirmation affirmation) {
            if(affirmation == WordService.Affirmation.AFFIRMATIVE) {
                return String.format(answerTemplate, yes);
            } else if(affirmation == WordService.Affirmation.NEGATIVE) {
                return String.format(answerTemplate, no);
            } else {
                throw new IllegalArgumentException(
                        "affirmation on getAnswer could be only " +
                                "affirmative or negative, but was neither");
            }
        }

        private static class Greetings {
            static final String morning = "Good morning!";
            static final String afternoon = "Good afternoon!";
            static final String evening = "Good evening!";
            static final String lateHours = "Hi, night owl!";


            static final List<Pair<Predicate<Integer>, String>> testsList =
                    List.of(
                            new Pair<>(Greetings::isMorning, morning),
                            new Pair<>(Greetings::isAfternoon, afternoon),
                            new Pair<>(Greetings::isEvening, evening),
                            new Pair<>(Greetings::isLateHours, lateHours)
                    );

            static String getGreeting(){
                final LocalTime time = LocalTime.now();
                final int currentHour = time.getHour();
                return testsList.stream()
                        .filter(pair -> pair.head.test(currentHour))
                        .findFirst()
                        .orElse(new Pair<>(x -> true, "You are out of the time dimension! NICE!!!"))
                        .tail;
            }

            static private boolean isMorning(int currentHour) {
                return currentHour >= 5 && currentHour <= 12;
            }

            static private boolean isAfternoon(int currentHour) {
                return currentHour > 12 && currentHour <= 18;
            }

            static private boolean isEvening(int currentHour) {
                return currentHour > 18 ;
            }

            static private boolean isLateHours(int currentHour) {
                return currentHour < 5;
            }
        }

    }
  learner_created: false
- name: test/en.data.yaml
  visible: false
  text: |-
    ---
    - - yaml
    - - json
    - - xml
  learner_created: false
- name: test/en.script.yaml
  visible: false
  text: |+
    #
    # There is a scenario of parameterized test for English language.
    #
    ---
    - [start, "-type {0}"] # We will test three different file formats: JSON, YAML, XML
    - - contains
      - which animal
      - When no Knwoledge Tree is created yet the program should ask for a favourite animals at first.
    - [input, cat]
    - - contains
      - welcome to the animal
      - After entering the favourite animal the program should welcom the user and represent itself as an expert system

    #
    # Start the menu
    #
    - - matches
      - "(?si).*play.*list.*search.*stat.*print.*exit.*"
      - The program should display the menu

    #
    # Let's play the game!
    #
    - [input, 1]
    - - contains
      - you think of an animal, and i guess it.
      - The program should asks the user to think of an animal
    - - contains
      - press enter
      - The computer should make a pause before the game.
    - [input, ""]

    #
    # After user press Enter the game started!
    #
    - - contains
      - is it a cat?
      - The very first question in the very first game should undoubtedly be about a beloved animal.
    - [input, No] # We think of about other animal, not about the cat
    - - contains
      - i give up
      - If the program cannot guess the animal, it must give up.
    - [input, dog] # Of course, our second animal is a dog!
    - - contains
      - distinguishes
      - The program should find out how one animal differs from another.
    - - input
      - it can climb trees
    - - find
      - is .+ correct for a dog?
      - The program should clarify if the statement is correct for a dog.
    - [input, no]

    - - contains
      - "cat can climb trees"
      - The program must generate the correct fact for the first animal.

    - - contains
      - "the dog "
      - The program must generate the correct fact for the second animal.

    - - matches
      - "(?is).*(again|repeat|one more).*"
      - The program should ask the user to play again
    - [input, yes] # Yes, we will play once again
    - [input, ""] # Press ENTER
    - - contains
      - can it climb trees?
      - After the first game, the starting question should be the question of fact.
    - [input, yes]
    - [contains, "is it a cat?", "The program must assume that the animal is a cat."]
    - - input
      - |
        no
        lynx
        it is living in the forest
        yes
        no
    # We finish the game.

    - - matches
      - "(?si).*play.*list.*search.*stat.*print.*exit.*"
      - The program should display the menu

    - [input, "0"] # Exit from the application
    - - matches
      - "(?si).*(bye|later|soon|off|see|!).*"
      - How about to say goodbye to the user?
    - [finish, "The program should finish when user exit"]
    - - file exists
      - "animals.{0}"
      - "The program should save knowledge tree to animals.{0} file."
    #
    # After the first session the program created and save the Knowledge Tree
    # We will run the program again to make sure that all data was saved and restored correctly.
    #
    - [start, "-type {0}"]
    - - not contains
      - which animal do you like most?
      - If the tree of knowledge exists, then the program should not ask the user about his favorite animal.
    - - find
      - welcome to the animal(.s)? expert system
      - The program should immediately greet the user after starting.
    #
    # Start the menu
    #
    - - matches
      - "(?si).*play.*list.*search.*stat.*print.*exit.*"
      - The program should display the menu

    #
    # Let's check which animals are now in our knowledge tree.
    #
    - [input, "2"]
    - - matches
      - (?si).*cat.*dog.*lynx.*
      - The program should print a list of all animals in alphabetical order.

    #
    # Check the facts about the animal
    #
    - [input, "3"]
    - - find
      - enter.* animal
      - The program should ask the user to enter the name of the animal
    - [input, lynx]
    - - contains
      - facts about the lynx
      - The program must find the animal that is in the knowledge tree.
    - - contains
      - it can climb trees
      - The program did not print the first fact about the animal
    - - contains
      - it is living in the forest
      - The program did not print the second fact about the animal

    #
    # Check the knowledge tree statistics
    #
    - [input, "4"]
    - [contains, "knowledge tree", "The header for the table must be printed"]

    - - find
      - (?i)root node.*It can climb trees
      - The root element in our tree must be a statement

    - - find
      - number of nodes.*\b5\b
      - The total number of nodes in the tree is not counted correctly.

    - - find
      - number of animals\D*3\b
      - The total number of animals in the tree is not counted correctly.

    - - find
      - number of statements\D*2\b
      - The total number of animals in the tree is not counted correctly.

    - - find
      - height of the tree\D*2\b
      - The tree depth was calculated incorrectly.

    - - find
      - minimum\D*1\b
      - The minimum tree depth was calculated incorrectly.

    - - find
      - average\D*1[,.]7
      - The average tree depth was calculated incorrectly.

    - [input, "0"] # Exit from the application
    - [finish, "The program should finish when user exit"]
    - - file delete
      - "animals.{0}"
      - "The test can't delete animals.{0} file."


  learner_created: false
- name: test/eo.data.yaml
  visible: false
  text: |-
    ---
    - - yaml
    - - json
    - - xml
  learner_created: false
- name: test/eo.script.yaml
  visible: false
  text: |+
    #
    # There is a scenario of parameterized test for Esperanto language.
    #
    ---
    - [start, "-type {0}"] # We will test three different file formats: JSON, YAML, XML
    - - contains
      - "kiun beston vi plej Åatas?"
      - "[Esperanto] When no Knowledge Tree is created yet the program should ask for a favourite animals at first."
    - [input, kato]
    - - contains
      - bonvenon al la sperta sistemo de la besto!
      - "[Esperanto] After entering the favourite animal the program should welcome the user and represent itself as an expert system"

    #
    # Start the menu
    #
    - - matches
      - (?si).*Ludi.*Listo.*SerÄi.*Kalkuli.*Eliri.*
      - "[Esperanto] The program should display the menu"

    #
    # Let's play the game!
    #
    - [input, 1]
    - - contains
      - vi pensu pri besto, kaj mi divenos Äin.
      - "[Esperanto] The program should asks the user to think of an animal"
    - - contains
      - premu enen kiam vi pretas.
      - "[Esperanto] The computer should make a pause before the game."
    - [input, ""]

    #
    # After user press Enter the game started!
    #
    - - contains
      - Äu Äi estas kato?
      - "[Esperanto] The very first question in the very first game should undoubtedly be about a beloved animal."
    - [input, ne] # We think of about other animal, not about the cat
    - - contains
      - mi rezignas. kiun beston vi havas en la kapo?
      - "[Esperanto] If the program cannot guess the animal, it must give up."
    - [input, hundo] # Of course, our second animal is a dog!
    - - contains
      - indiku fakton, kiu distingas kato de hundo
      - "[Esperanto] The program should find out how one animal differs from another."
    - - input
      - Äi povas surgrimpi arbon
    - - contains
      - Äu la aserto Äustas por la hundo?
      - "[Esperanto] The program should clarify if the statement is correct for a dog."
    - [input, ne]

    - - contains
      - la kato povas surgrimpi arbon
      - The program must generate the correct fact for the first animal.

    - - contains
      - la hundo ne povas surgrimpi arbon
      - "[Esperanto] The program must generate the correct fact for the second animal."

    - - matches
      - "(?is).*(denove|ripeti|ankoraÅ­).*"
      - "[Esperanto] The program should ask the user to play again"
    - [input, jes] # Yes, we will play once again
    - [input, ""] # Press ENTER
    - - contains
      - povas surgrimpi arbon?
      - "[Esperanto] After the first game, the starting question should be the question of fact."
    - [input, jes]
    - [contains, "Äu Äi estas kato?", "[Esperanto] The program must assume that the animal is a cat."]
    - - input
      - |
        ne
        linko
        Äi loÄas en la arbaro
        jes
        ne
    # We finish the game.
    - - matches
      - (?si).*Ludi.*Listo.*SerÄi.*Kalkuli.*Eliri.*
      - "[Esperanto] The program should display the menu"
    - [input, "0"] # Exit from the application
    - - matches
      - "(?si).*(Äis|estis).*"
      - "[Esperanto] How about to say goodbye to the user?"
    - [finish, "The program should finish when user exit"]
    - - file exists
      - "animals_eo.{0}"
      - "The program should save knowledge tree to animals_eo.{0} file."
    #
    # After the first session the program created and save the Knowledge Tree
    # We will run the program again to make sure that all data was saved and restored correctly.
    #
    - [start, "-type {0}"]
    - - not contains
      - kiun beston vi plej Åatas?
      - "[Esperanto] If the tree of knowledge exists, then the program should not ask the user about his favorite animal."
    - - contains
      - bonvenon al la sperta sistemo de la besto!
      - "[Esperanto] The program should immediately greet the user after starting."
    - - matches
      - (?si).*Ludi.*Listo.*SerÄi.*Kalkuli.*Eliri.*
      - "[Esperanto] The program should display the menu"

    #
    # Let's check which animals are now in our knowledge tree.
    #
    - [input, "2"]
    - - matches
      - (?si).*hundo.*kato.*linko.*
      - "[Esperanto] The program should print a list of all animals in alphabetical order."

    #
    # Check the facts about the animal
    #
    - [input, "3"]
    - - find
      - enigu .* besto
      - "[Esperanto] The program should ask the user to enter the name of the animal"
    - [input, linko]
    - - contains
      - faktoj pri la linko
      - "[Esperanto] The program must find the animal that is in the knowledge tree."
    - - contains
      - Äi povas surgrimpi arbon
      - "[Esperanto] The program did not print the first fact about the animal"
    - - contains
      - Äi loÄas en la arbaro
      - "[Esperanto] The program did not print the second fact about the animal"

    #
    # Check the knowledge tree statistics
    #
    - [input, "4"]
    - [contains, "la statistiko", "The header for the table must be printed"]

    - - matches
      - (?is).*radika nodo.*povas surgrimpi arbon.*
      - "[Esperanto] The root element in our tree must be a statement"

    - - matches
      - (?is).*nombro de nodoj[^\\R]*5.*
      - "[Esperanto] The total number of nodes in the tree is not counted correctly."

    - - matches
      - (?is).*nombro de bestoj[^\\R]*3.*
      - "[Esperanto] The total number of animals in the tree is not counted correctly."

    - - matches
      - (?is).*nombro de deklaroj[^\\R]*2.*
      - "[Esperanto] The total number of animals in the tree is not counted correctly."

    - - matches
      - (?is).*alteco de la arbo[^\\R]*2.*
      - "[Esperanto] The tree depth was calculated incorrectly."

    - - matches
      - (?is).*minimuma profundo[^\\R]*1.*
      - "[Esperanto] The minimum tree depth was calculated incorrectly."

    - - matches
      - (?is).*averaÄa profundo[^\\R]*1[,.]7.*
      - "[Esperanto] The average tree depth was calculated incorrectly."

    - [input, "0"] # Exit from the application
    - [finish, "The program should finish when user exit"]
    - - file delete
      - "animals_eo.{0}"
      - "[Esperanto] The test can't delete animals_eo.{0} file."


  learner_created: false
- name: test/GuessAnimalTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.io.File;
    import java.io.IOException;
    import java.util.Locale;
    import java.util.stream.Stream;

    public class GuessAnimalTest extends StageTest<String> {

        String[] languages = new String[]{"en", "eo"};

        @DynamicTest(data = "languages")
        CheckResult testLanguages(final String language) throws IOException {
            final var fileName = "animals" + ("en".equals(language) ? "." : "_" + language + ".");

            final var locale = Locale.getDefault();
            final var systemLanguage = System.getProperty("user.language");
            Locale.setDefault(new Locale(language));
            System.setProperty("user.language", language);

            deleteFiles(fileName);
            final var result = new Scenario(language).check();
            deleteFiles(fileName);

            Locale.setDefault(locale);
            System.setProperty("user.language", systemLanguage);

            return result;
        }

        private void deleteFiles(String fileName) {
            Stream.of("yaml", "json", "xml")
                    .map(fileName::concat)
                    .map(File::new)
                    .filter(File::exists)
                    .forEach(File::delete);
        }
    }
  learner_created: false
- name: test/Scenario.java
  visible: false
  text: |-
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.io.File;
    import java.io.IOException;
    import java.util.Map;
    import java.util.function.Predicate;
    import java.util.regex.Pattern;

    import static java.text.MessageFormat.format;
    import static java.util.function.Predicate.not;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class Scenario {
        private final Object[][] data;
        private final String[][] script;
        private TestedProgram main;
        private String output = "";

        Scenario(String name) throws IOException {
            data = new YAMLMapper().readValue(new File("test/" + name + ".data.yaml"), String[][].class);
            script = new YAMLMapper().readValue(new File("test/" + name + ".script.yaml"), String[][].class);
            System.out.println("Scenario '" + name + "' is started.");
            System.out.println();
        }

        CheckResult check() {
            for (var values : data) {
                for (var action : script) {
                    final var command = action[0];
                    switch (command) {
                        case "start":
                            main = new TestedProgram();
                            output = action.length == 1
                                    ? main.start()
                                    : main.start(format(action[1], values).split(" "));
                            output = output.trim().toLowerCase();
                            continue;
                        case "input":
                            output = main.execute(format(action[1], values)).trim().toLowerCase();
                            continue;
                        case "finish":
                            if (main.isFinished()) continue;
                            return wrong(format(action[1], values));
                        default:
                            final Map<String, Predicate<String>> validation = Map.of(
                                    "contains", output::contains,
                                    "not contains", not(output::contains),
                                    "file exists", file -> new File(file).exists(),
                                    "file delete", file -> new File(file).delete(),
                                    "find", pattern -> Pattern.compile(pattern).matcher(output).find(),
                                    "matches", output::matches);

                            final var expected = format(action[1], values);
                            if (validation.get(command).test(expected)) {
                                continue;
                            }
                            final var feedback = format(action[2], values) + System.lineSeparator()
                                    + "Expected " + command + ": \"" + expected + "\"" + System.lineSeparator()
                                    + "Actual data is: \"" + output + "\".";
                            return wrong(feedback);
                    }
                }
            }
            return correct();
        }

    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/132/stages/708/implement#comment
status: Unchecked
record: -1
